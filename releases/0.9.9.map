android.support.v4.os.ParcelableCompat -> a:
    int metaStateFilterDirectionalModifiers$2e71581f(int,int,int,int) -> a
    int normalizeMetaState(int) -> c
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    long getPlaylist(android.content.ContentResolver,java.lang.String) -> a
    void deletePlaylist(android.content.ContentResolver,long) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.util.LruCache -> e:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int createCount -> d
    int evictionCount -> e
    int hitCount -> f
    int missCount -> g
    java.lang.Object get(java.lang.Object) -> a
    void trimToSize(int) -> a
    java.lang.Object create(java.lang.Object) -> b
    int safeSizeOf(java.lang.Object,java.lang.Object) -> a
    int sizeOf$2838e5a0(java.lang.Object) -> c
    java.lang.String toString() -> toString
android.support.v4.view.KeyEventCompat -> f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers$79c6ddc0(android.view.KeyEvent) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> g:
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> h:
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat -> j:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> k:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> l:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> m:
    android.database.DataSetObservable mObservable -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem$30510aeb(android.view.ViewGroup,int) -> b
    void setPrimaryItem$30510aeb(int) -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState$2cb49ec(android.os.Parcelable) -> a
    java.lang.CharSequence getPageTitle(int) -> b
android.support.v4.view.VelocityTrackerCompat -> n:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> q:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> r:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> t:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$ViewCompatImpl -> u:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> v:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> w:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> x:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> y:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.PagerAdapter mAdapter -> e
    int mCurItem -> f
    int mRestoredCurItem -> g
    android.os.Parcelable mRestoredAdapterState -> h
    java.lang.ClassLoader mRestoredClassLoader -> i
    android.widget.Scroller mScroller -> j
    android.support.v4.view.ViewPager$PagerObserver mObserver -> k
    int mChildWidthMeasureSpec -> l
    int mChildHeightMeasureSpec -> m
    boolean mInLayout -> n
    boolean mScrollingCacheEnabled -> o
    boolean mPopulatePending -> p
    boolean mScrolling -> q
    int mOffscreenPageLimit -> r
    boolean mIsBeingDragged -> s
    boolean mIsUnableToDrag -> t
    int mTouchSlop -> u
    float mInitialMotionX -> v
    float mLastMotionX -> w
    float mLastMotionY -> x
    int mActivePointerId -> y
    android.view.VelocityTracker mVelocityTracker -> z
    int mMinimumVelocity -> A
    int mMaximumVelocity -> B
    int mFlingDistance -> C
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> D
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> E
    boolean mFirstLayout -> F
    boolean mCalledSuper -> G
    int mDecorChildCount -> H
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> I
    int mScrollState -> J
    void setScrollState(int) -> b
    void setAdapter(android.support.v4.view.PagerAdapter) -> a
    android.support.v4.view.PagerAdapter getAdapter() -> a
    void setCurrentItem(int) -> a
    void setCurrentItem$2563266(int) -> c
    int getCurrentItem() -> b
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void addNewItem(int,int) -> a
    void dataSetChanged() -> c
    void populate() -> e
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    void pageScrolled(int) -> d
    void completeScroll() -> f
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> g
    void setScrollingCacheEnabled(boolean) -> a
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean arrowScroll(int) -> e
    boolean pageLeft() -> h
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$100() -> d
android.support.v4.view.ViewPager$1 -> z:
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> aa:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> ab:
android.support.v4.view.ViewPager$ItemInfo -> ac:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
android.support.v4.view.ViewPager$LayoutParams -> ad:
    boolean isDecor -> a
    int gravity -> b
android.support.v4.view.ViewPager$OnPageChangeListener -> ae:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> c
    void onPageScrollStateChanged(int) -> d
android.support.v4.view.ViewPager$PagerObserver -> af:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.widget.EdgeEffectCompat -> ag:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> ah:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> ai:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> aj:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.viewpagerindicator.TabPageIndicator -> com.viewpagerindicator.TabPageIndicator:
    java.lang.Runnable mTabSelector -> a
    android.widget.LinearLayout mTabLayout -> b
    android.support.v4.view.ViewPager mViewPager -> c
    android.support.v4.view.ViewPager$OnPageChangeListener mListener -> d
    int mSelectedTabIndex -> e
    void onMeasure(int,int) -> onMeasure
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onPageScrollStateChanged(int) -> d
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> c
    void setViewPager(android.support.v4.view.ViewPager) -> a
    void notifyDataSetChanged() -> a
    void setCurrentItem(int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    void onClick(android.view.View) -> onClick
com.viewpagerindicator.TabPageIndicator$1 -> ak:
    android.view.View val$tabView -> a
    com.viewpagerindicator.TabPageIndicator this$0 -> b
    void run() -> run
org.kreed.vanilla.Action -> al:
    org.kreed.vanilla.Action Nothing -> a
    org.kreed.vanilla.Action Library -> b
    org.kreed.vanilla.Action PlayPause -> c
    org.kreed.vanilla.Action NextSong -> d
    org.kreed.vanilla.Action PreviousSong -> e
    org.kreed.vanilla.Action NextAlbum -> f
    org.kreed.vanilla.Action PreviousAlbum -> g
    org.kreed.vanilla.Action Repeat -> h
    org.kreed.vanilla.Action Shuffle -> i
    org.kreed.vanilla.Action EnqueueAlbum -> j
    org.kreed.vanilla.Action EnqueueArtist -> k
    org.kreed.vanilla.Action EnqueueGenre -> l
    org.kreed.vanilla.Action ClearQueue -> m
    org.kreed.vanilla.Action ToggleControls -> n
    org.kreed.vanilla.Action[] $VALUES -> o
    org.kreed.vanilla.Action[] values() -> values
    org.kreed.vanilla.Action valueOf(java.lang.String) -> valueOf
    org.kreed.vanilla.Action getAction(android.content.SharedPreferences,java.lang.String,org.kreed.vanilla.Action) -> a
org.kreed.vanilla.ActionBarControls -> org.kreed.vanilla.ActionBarControls:
    void onMeasure(int,int) -> onMeasure
org.kreed.vanilla.CompatEq -> org.kreed.vanilla.CompatEq:
    android.media.audiofx.Equalizer mEq -> a
    short getNumberOfBands() -> a
    void setBandLevel(short,short) -> a
org.kreed.vanilla.CompatFroyo -> org.kreed.vanilla.CompatFroyo:
    org.kreed.vanilla.CompatFroyo sAudioFocus -> a
    void registerMediaButtonEventReceiver(android.media.AudioManager,android.content.ComponentName) -> a
    void unregisterMediaButtonEventReceiver(android.media.AudioManager,android.content.ComponentName) -> b
    void dataChanged(android.content.Context) -> a
    void createAudioFocus() -> a
    void requestAudioFocus(android.media.AudioManager) -> a
    void onAudioFocusChange(int) -> onAudioFocusChange
org.kreed.vanilla.CompatHoneycomb -> org.kreed.vanilla.CompatHoneycomb:
    void addActionBarTabs(org.kreed.vanilla.LibraryActivity) -> a
    void setFastScrollAlwaysVisible$3e28fd4a(android.widget.ListView) -> a
    void setActionView(android.view.MenuItem,android.view.View) -> a
    void setShowAsAction$558c4bad(android.view.MenuItem) -> a
    void selectTab(android.app.Activity,int) -> a
    android.net.Uri getContentUriForAudioId(int) -> a
org.kreed.vanilla.CompatHoneycomb$1 -> am:
    org.kreed.vanilla.LibraryActivity mActivity -> a
    org.kreed.vanilla.LibraryActivity val$activity -> b
    void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabReselected
    void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabSelected
    void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabUnselected
org.kreed.vanilla.CompatIcs -> org.kreed.vanilla.CompatIcs:
    android.media.RemoteControlClient sRemote -> a
    void registerRemote(android.content.Context,android.media.AudioManager) -> a
    void updateRemote(android.content.Context,org.kreed.vanilla.Song,int) -> a
org.kreed.vanilla.CoverBitmap -> an:
    int TEXT_SIZE -> a
    int TEXT_SIZE_BIG -> b
    int PADDING -> c
    int TEXT_SPACE -> d
    android.graphics.Bitmap SONG_ICON -> e
    android.graphics.Bitmap ALBUM_ICON -> f
    android.graphics.Bitmap ARTIST_ICON -> g
    void loadTextSizes(android.content.Context) -> a
    void drawText(android.graphics.Canvas,java.lang.String,int,int,int,int,android.graphics.Paint) -> a
    android.graphics.Bitmap createBitmap(android.content.Context,int,android.graphics.Bitmap,org.kreed.vanilla.Song,int,int) -> a
    android.graphics.Bitmap generateDefaultCover(int,int) -> a
org.kreed.vanilla.CoverView -> org.kreed.vanilla.CoverView:
    int sSnapVelocity -> a
    android.util.DisplayMetrics sDisplayMetrics -> b
    android.os.Handler mHandler -> c
    android.os.Handler mUiHandler -> d
    int mCoverStyle -> e
    org.kreed.vanilla.CoverView$Callback mCallback -> f
    org.kreed.vanilla.Song[] mSongs -> g
    android.graphics.Bitmap[] mBitmaps -> h
    android.graphics.Bitmap mDefaultCover -> i
    android.widget.Scroller mScroller -> j
    android.view.VelocityTracker mVelocityTracker -> k
    float mLastMotionX -> l
    float mLastMotionY -> m
    float mStartX -> n
    float mStartY -> o
    int mTentativeCover -> p
    boolean mIgnoreNextUp -> q
    boolean mPendingQuery -> r
    boolean mSuppressInvalidate -> s
    void setup(android.os.Looper,org.kreed.vanilla.CoverView$Callback,int) -> a
    void resetScroll() -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setSong(int,org.kreed.vanilla.Song) -> a
    void querySongs(org.kreed.vanilla.PlaybackService) -> a
    boolean handleMessage(android.os.Message) -> handleMessage
    void onMeasure(int,int) -> onMeasure
    void invalidate() -> invalidate
org.kreed.vanilla.CoverView$Callback -> ao:
    void shiftCurrentSong(int) -> a
    void upSwipe() -> a
    void downSwipe() -> b
org.kreed.vanilla.DragListView -> org.kreed.vanilla.DragListView:
    android.os.Handler mHandler -> a
    org.kreed.vanilla.PlaylistAdapter mAdapter -> b
    boolean mEditable -> c
    android.widget.ImageView mDragView -> d
    android.graphics.Bitmap mDragBitmap -> e
    android.view.WindowManager mWindowManager -> f
    android.view.WindowManager$LayoutParams mWindowParams -> g
    int mDragPos -> h
    int mSrcDragPos -> i
    int mDragPointY -> j
    int mYOffset -> k
    int mDragHeight -> l
    int mLastMotionY -> m
    void setAdapter(org.kreed.vanilla.PlaylistAdapter) -> a
    void setEditable(boolean) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int computeDragPosition(int) -> a
    void stopDragging() -> a
    boolean handleMessage(android.os.Message) -> handleMessage
org.kreed.vanilla.FileSystemAdapter -> ap:
    java.util.regex.Pattern SPACE_SPLIT -> c
    java.util.regex.Pattern FILE_SEPARATOR -> d
    org.kreed.vanilla.LibraryActivity mActivity -> a
    org.kreed.vanilla.Limiter mLimiter -> e
    java.io.File[] mFiles -> f
    android.graphics.Bitmap mFolderIcon -> g
    java.lang.String[] mFilter -> b
    java.io.FilenameFilter mFileFilter -> h
    java.util.Comparator mFileComparator -> i
    org.kreed.vanilla.FileSystemAdapter$Observer mFileObserver -> j
    java.lang.Object query() -> a
    void commitQuery(java.lang.Object) -> a
    void clear() -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setFilter(java.lang.String) -> a
    void setLimiter(org.kreed.vanilla.Limiter) -> a
    org.kreed.vanilla.Limiter getLimiter() -> c
    org.kreed.vanilla.Limiter buildLimiter(java.io.File) -> a
    org.kreed.vanilla.Limiter buildLimiter(long) -> a
    int getMediaType() -> d
org.kreed.vanilla.FileSystemAdapter$1 -> aq:
    org.kreed.vanilla.FileSystemAdapter this$0 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
org.kreed.vanilla.FileSystemAdapter$2 -> ar:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.kreed.vanilla.FileSystemAdapter$Observer -> as:
    org.kreed.vanilla.FileSystemAdapter this$0 -> a
    void onEvent(int,java.lang.String) -> onEvent
org.kreed.vanilla.FourLongWidget -> org.kreed.vanilla.FourLongWidget:
    boolean sEnabled -> a
    void onEnabled(android.content.Context) -> onEnabled
    void onDisabled(android.content.Context) -> onDisabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,org.kreed.vanilla.Song,int) -> a
org.kreed.vanilla.FourSquareWidget -> org.kreed.vanilla.FourSquareWidget:
    boolean sEnabled -> a
    void onEnabled(android.content.Context) -> onEnabled
    void onDisabled(android.content.Context) -> onDisabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,org.kreed.vanilla.Song,int) -> a
org.kreed.vanilla.FullPlaybackActivity -> org.kreed.vanilla.FullPlaybackActivity:
    android.widget.TextView mOverlayText -> a
    android.view.View mControlsBottom -> b
    android.widget.SeekBar mSeekBar -> k
    android.widget.TextView mElapsedView -> l
    android.widget.TextView mDurationView -> m
    android.widget.TextView mTitle -> n
    android.widget.TextView mAlbum -> o
    android.widget.TextView mArtist -> p
    boolean mControlsVisible -> q
    long mDuration -> r
    boolean mSeekBarTracking -> s
    boolean mPaused -> t
    int mDisplayMode -> u
    org.kreed.vanilla.Action mCoverPressAction -> v
    org.kreed.vanilla.Action mCoverLongPressAction -> w
    java.lang.StringBuilder mTimeBuilder -> x
    org.kreed.vanilla.Song mCurrentSong -> y
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void showOverlayMessage(int) -> c
    void onStateChange(int,int) -> a
    void onSongChange(org.kreed.vanilla.Song) -> a
    void setDuration(long) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onSearchRequested() -> onSearchRequested
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void updateProgress() -> d
    void setControlsVisible(boolean) -> a
    boolean handleMessage(android.os.Message) -> handleMessage
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void performAction(org.kreed.vanilla.Action) -> a
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
org.kreed.vanilla.IdlePreference -> org.kreed.vanilla.IdlePreference:
    int mValue -> a
    android.widget.TextView mValueText -> b
    java.lang.CharSequence getSummary() -> getSummary
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    java.lang.String formatTime(int) -> a
    void updateText() -> a
    void onDialogClosed(boolean) -> onDialogClosed
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.kreed.vanilla.LibraryActivity -> org.kreed.vanilla.LibraryActivity:
    int[] modeForAction -> k
    android.support.v4.view.ViewPager mViewPager -> a
    android.view.View mSearchBox -> l
    boolean mSearchBoxVisible -> m
    android.widget.TextView mTextFilter -> n
    android.view.View mClearButton -> o
    android.view.View mActionControls -> p
    android.view.View mControls -> q
    android.widget.TextView mTitle -> r
    android.widget.TextView mArtist -> s
    android.widget.ImageView mCover -> t
    android.view.View mEmptyQueue -> u
    android.widget.HorizontalScrollView mLimiterScroller -> v
    android.view.ViewGroup mLimiterViews -> w
    int mDefaultAction -> x
    int mLastAction -> y
    long mLastActedId -> z
    org.kreed.vanilla.LibraryPagerAdapter mPagerAdapter -> b
    org.kreed.vanilla.LibraryAdapter mCurrentAdapter -> A
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void checkForLaunch(android.content.Intent) -> a
    void loadAlbumIntent(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void updateHeaders() -> d
    void pickSongs(android.content.Intent,int) -> a
    void expand(android.content.Intent) -> c
    void openPlaybackActivity() -> e
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void updateLimiterViews() -> f
    void onClick(android.view.View) -> onClick
    android.content.Intent createClickIntent(org.kreed.vanilla.LibraryAdapter,org.kreed.vanilla.MediaView) -> a
    org.kreed.vanilla.QueryTask buildQueryFromIntent(android.content.Intent,boolean,boolean) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void addToPlaylist(long,android.content.Intent) -> a
    void editPlaylist(long,java.lang.String) -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean handleMessage(android.os.Message) -> handleMessage
    void onMediaChange() -> c
    void setSearchBoxVisible(boolean) -> a
    void onStateChange(int,int) -> a
    void onSongChange(org.kreed.vanilla.Song) -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onAdapterSelected(org.kreed.vanilla.LibraryAdapter) -> a
org.kreed.vanilla.LibraryAdapter -> at:
    int getMediaType() -> d
    org.kreed.vanilla.Limiter getLimiter() -> c
    org.kreed.vanilla.Limiter buildLimiter(long) -> a
    void setFilter(java.lang.String) -> a
    java.lang.Object query() -> a
    void commitQuery(java.lang.Object) -> a
    void clear() -> b
org.kreed.vanilla.LibraryPagerAdapter -> au:
    int[] TITLES -> d
    android.widget.ListView[] mLists -> e
    boolean[] mRequeryNeeded -> f
    org.kreed.vanilla.LibraryAdapter[] mAdapters -> b
    org.kreed.vanilla.MediaAdapter mArtistAdapter -> g
    org.kreed.vanilla.MediaAdapter mAlbumAdapter -> h
    org.kreed.vanilla.MediaAdapter mSongAdapter -> i
    org.kreed.vanilla.MediaAdapter mPlaylistAdapter -> c
    org.kreed.vanilla.FileSystemAdapter mFilesAdapter -> j
    org.kreed.vanilla.LibraryAdapter mCurrentAdapter -> k
    int mCurrentPage -> l
    org.kreed.vanilla.Limiter mPendingAlbumLimiter -> m
    org.kreed.vanilla.Limiter mPendingSongLimiter -> n
    org.kreed.vanilla.Limiter mPendingFileLimiter -> o
    int[] mSavedPositions -> p
    org.kreed.vanilla.LibraryActivity mActivity -> q
    android.os.Handler mUiHandler -> r
    android.os.Handler mWorkerHandler -> s
    java.lang.String mHeaderText -> t
    java.lang.String mFilter -> u
    android.database.ContentObserver mPlaylistObserver -> v
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem$30510aeb(android.view.ViewGroup,int) -> b
    java.lang.CharSequence getPageTitle(int) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    void setPrimaryItem$30510aeb(int) -> a
    void restoreState$2cb49ec(android.os.Parcelable) -> a
    android.os.Parcelable saveState() -> a
    void setHeaderText(java.lang.String) -> a
    void clearLimiter(int) -> e
    int setLimiter(org.kreed.vanilla.Limiter) -> a
    org.kreed.vanilla.Limiter getCurrentLimiter() -> b
    boolean handleMessage(android.os.Message) -> handleMessage
    void requestRequery(org.kreed.vanilla.LibraryAdapter) -> b
    void postRequestRequery(org.kreed.vanilla.LibraryAdapter) -> a
    void postRunQuery(org.kreed.vanilla.LibraryAdapter) -> c
    void requeryIfNeeded(int) -> g
    void invalidateData() -> c
    void loadSortOrder(org.kreed.vanilla.MediaAdapter) -> a
    void setSortMode(int) -> f
    void setFilter(java.lang.String) -> b
    void onPageScrollStateChanged(int) -> d
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> c
org.kreed.vanilla.LibraryPagerAdapter$1 -> av:
    org.kreed.vanilla.LibraryPagerAdapter this$0 -> a
    void onChange(boolean) -> onChange
org.kreed.vanilla.Limiter -> aw:
    int type -> a
    java.lang.String[] names -> b
    java.lang.Object data -> c
org.kreed.vanilla.ListPreferenceSummary -> org.kreed.vanilla.ListPreferenceSummary:
    java.lang.CharSequence getSummary() -> getSummary
    void onDialogClosed(boolean) -> onDialogClosed
org.kreed.vanilla.MediaAdapter -> ax:
    java.util.regex.Pattern SPACE_SPLIT -> a
    android.content.Context mContext -> b
    int mType -> c
    android.net.Uri mStore -> d
    java.lang.String[] mFields -> e
    java.lang.String[] mFieldKeys -> f
    java.lang.String[] mProjection -> g
    boolean mExpandable -> h
    org.kreed.vanilla.Limiter mLimiter -> i
    java.lang.String mConstraint -> j
    org.kreed.vanilla.MusicAlphabetIndexer mIndexer -> k
    java.lang.Object[] mSections -> l
    boolean mHasHeader -> m
    java.lang.String mHeaderText -> n
    java.lang.String mSongSort -> o
    int[] mSortEntries -> p
    java.lang.String[] mSortValues -> q
    int mSortMode -> r
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setHeaderText(java.lang.String) -> b
    void setFilter(java.lang.String) -> a
    org.kreed.vanilla.QueryTask buildQuery(java.lang.String[],boolean) -> a
    java.lang.Object query() -> a
    void commitQuery(java.lang.Object) -> a
    org.kreed.vanilla.QueryTask buildSongQuery(java.lang.String[]) -> a
    void clear() -> b
    int getMediaType() -> d
    void setLimiter(org.kreed.vanilla.Limiter) -> a
    org.kreed.vanilla.Limiter getLimiter() -> c
    org.kreed.vanilla.Limiter buildLimiter(long) -> a
    void changeCursor(android.database.Cursor) -> changeCursor
    java.lang.Object[] getSections() -> getSections
    int getPositionForSection(int) -> getPositionForSection
    int getSectionForPosition(int) -> getSectionForPosition
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    int getLimiterType() -> e
    int[] getSortEntries() -> f
    void setSortMode(int) -> a
    int getDefaultSortMode() -> g
    int getSortMode() -> h
org.kreed.vanilla.MediaButtonReceiver -> org.kreed.vanilla.MediaButtonReceiver:
    int sUseControls -> a
    int sInCall -> b
    long sLastClickTime -> c
    void reloadPreference(android.content.Context) -> a
    boolean useHeadsetControls(android.content.Context) -> b
    void setInCall(boolean) -> a
    boolean processKey(android.content.Context,android.view.KeyEvent) -> a
    void registerMediaButton(android.content.Context) -> c
    void unregisterMediaButton(android.content.Context) -> d
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.kreed.vanilla.MediaUtils -> ay:
    java.util.Random sRandom -> a
    long[] sAllSongs -> b
    int sAllSongsIdx -> c
    org.kreed.vanilla.Song[] sRandomCache -> d
    int sRandomCacheIdx -> e
    int sRandomCacheEnd -> f
    int sSongCount -> g
    java.util.Random getRandom() -> b
    org.kreed.vanilla.QueryTask buildMediaQuery(int,long,java.lang.String[],java.lang.String) -> a
    org.kreed.vanilla.QueryTask buildPlaylistQuery(long,java.lang.String[],java.lang.String) -> a
    org.kreed.vanilla.QueryTask buildGenreQuery(long,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    org.kreed.vanilla.QueryTask buildQuery(int,long,java.lang.String[],java.lang.String) -> b
    long queryGenreForSong(android.content.ContentResolver,long) -> a
    void shuffle(long[]) -> a
    void shuffle(org.kreed.vanilla.Song[],int) -> a
    void shuffle(java.util.List,boolean) -> a
    boolean isSongAvailable(android.content.ContentResolver) -> a
    void onMediaChange() -> a
    org.kreed.vanilla.Song randomSong(android.content.ContentResolver) -> b
    boolean deleteFile(java.io.File) -> a
    org.kreed.vanilla.QueryTask buildFileQuery(java.lang.String,java.lang.String[]) -> a
org.kreed.vanilla.MediaView -> az:
    android.graphics.Bitmap sExpander -> a
    android.graphics.Paint sPaint -> d
    int sTextSize -> e
    int mViewHeight -> b
    android.graphics.Bitmap mLeftBitmap -> f
    android.graphics.Bitmap mRightBitmap -> g
    long mId -> h
    java.lang.String mTitle -> i
    java.lang.String mSubTitle -> j
    boolean mShowBitmaps -> k
    boolean mBottomGravity -> c
    int mTouchX -> l
    void init(android.content.Context) -> a
    void setShowBitmaps(boolean) -> a
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    long getMediaId() -> a
    java.lang.String getTitle() -> b
    boolean hasRightBitmap() -> c
    boolean isRightBitmapPressed() -> d
    void makeHeader(java.lang.String) -> a
    void updateMedia(android.database.Cursor,boolean) -> a
    void setData(long,java.lang.String) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.kreed.vanilla.MiniPlaybackActivity -> org.kreed.vanilla.MiniPlaybackActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
org.kreed.vanilla.MusicAlphabetIndexer -> ba:
    java.lang.String[] ALPHABET -> a
    java.lang.String[] ALPHABET_KEYS -> b
    int[] mAlphaMap -> c
    android.database.Cursor mDataCursor -> d
    java.lang.Object[] getSections() -> a
    void setCursor(android.database.Cursor) -> a
    int getPositionForSection(int) -> a
    int getSectionForPosition(int) -> b
org.kreed.vanilla.NewPlaylistDialog -> bb:
    android.widget.Button mPositiveButton -> a
    android.widget.EditText mText -> b
    boolean mAccepted -> c
    java.lang.String mInitialText -> d
    int mActionRes -> e
    android.content.Intent mIntent -> f
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getText() -> a
    android.content.Intent getIntent() -> b
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    boolean isAccepted() -> c
    void onClick(android.view.View) -> onClick
org.kreed.vanilla.OneCellWidget -> org.kreed.vanilla.OneCellWidget:
    boolean sEnabled -> a
    void onEnabled(android.content.Context) -> onEnabled
    void onDisabled(android.content.Context) -> onDisabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,org.kreed.vanilla.Song,int) -> a
org.kreed.vanilla.PlaybackActivity -> org.kreed.vanilla.PlaybackActivity:
    org.kreed.vanilla.Action mUpAction -> a
    org.kreed.vanilla.Action mDownAction -> b
    android.os.Handler mUiHandler -> c
    android.os.Handler mHandler -> d
    android.os.Looper mLooper -> e
    org.kreed.vanilla.CoverView mCoverView -> f
    android.widget.ImageButton mPlayPauseButton -> g
    android.widget.ImageButton mShuffleButton -> h
    android.widget.ImageButton mEndButton -> i
    int mState -> j
    long mLastStateEvent -> k
    long mLastSongEvent -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onResume() -> onResume
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void shiftCurrentSong(int) -> a
    void onClick(android.view.View) -> onClick
    void onStateChange(int,int) -> a
    void setState(int) -> b
    void setState(long,int) -> a
    void onSongChange(org.kreed.vanilla.Song) -> a
    void setSong(org.kreed.vanilla.Song) -> b
    void setSong(long,org.kreed.vanilla.Song) -> a
    void replaceSong(int,org.kreed.vanilla.Song) -> a
    void onMediaChange() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean handleMessage(android.os.Message) -> handleMessage
    void openLibrary(org.kreed.vanilla.Song) -> c
    void upSwipe() -> a
    void downSwipe() -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
org.kreed.vanilla.PlaybackActivity$1 -> bc:
    int val$state -> a
    int val$toggled -> b
    org.kreed.vanilla.PlaybackActivity this$0 -> c
    void run() -> run
org.kreed.vanilla.PlaybackActivity$2 -> bd:
    org.kreed.vanilla.Song val$song -> a
    org.kreed.vanilla.PlaybackActivity this$0 -> b
    void run() -> run
org.kreed.vanilla.PlaybackService -> org.kreed.vanilla.PlaybackService:
    int mState -> a
    java.lang.Object[] mStateLock -> b
    java.lang.Object[] sWait -> h
    org.kreed.vanilla.PlaybackService sInstance -> c
    java.util.ArrayList sActivities -> i
    android.content.SharedPreferences sSettings -> j
    boolean mHeadsetPause -> d
    boolean mScrobble -> k
    boolean mStockBroadcast -> l
    int mNotificationMode -> m
    boolean mHeadsetOnly -> n
    boolean mHeadsetPlay -> e
    boolean mPlugInitialized -> f
    int mIdleTimeout -> o
    android.app.PendingIntent mNotificationAction -> p
    boolean mInvertNotification -> q
    android.os.Looper mLooper -> r
    android.os.Handler mHandler -> s
    android.media.MediaPlayer mMediaPlayer -> t
    boolean mMediaPlayerInitialized -> u
    android.os.PowerManager$WakeLock mWakeLock -> v
    android.app.NotificationManager mNotificationManager -> w
    android.media.AudioManager mAudioManager -> x
    android.hardware.SensorManager mSensorManager -> y
    org.kreed.vanilla.CompatEq mEqualizer -> z
    org.kreed.vanilla.SongTimeline mTimeline -> A
    org.kreed.vanilla.Song mCurrentSong -> B
    boolean mPlayingBeforeCall -> g
    int mPendingSeek -> C
    long mPendingSeekSong -> D
    org.kreed.vanilla.PlaybackService$Receiver mReceiver -> E
    org.kreed.vanilla.PlaybackService$InCallListener mCallListener -> F
    java.lang.String mErrorMessage -> G
    float mUserVolume -> H
    float mBaseVolume -> I
    boolean mFadeInProgress -> J
    long mIdleStart -> K
    boolean mDuckedLoss -> L
    double mAccelLast -> M
    double mAccelFiltered -> N
    long mLastShakeTime -> O
    double mShakeThreshold -> P
    org.kreed.vanilla.Action mShakeAction -> Q
    boolean mForceNotificationVisible -> R
    android.database.ContentObserver mObserver -> S
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.content.SharedPreferences getSettings(android.content.Context) -> a
    void setupSensor() -> m
    void updateVolume() -> n
    void setFlag(int) -> a
    void unsetFlag$13462e() -> a
    boolean isSpeakerOn() -> o
    int updateState(int) -> k
    void broadcastChange(int,org.kreed.vanilla.Song,long) -> a
    void updateNotification() -> p
    int play() -> q
    int pause() -> r
    int playPause() -> b
    int setFinishAction(int) -> b
    int cycleFinishAction() -> c
    int setShuffleMode(int) -> c
    int cycleShuffle() -> d
    org.kreed.vanilla.Song setCurrentSong(int) -> l
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    org.kreed.vanilla.Song getSong(int) -> d
    void onMediaChange() -> e
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    boolean handleMessage(android.os.Message) -> handleMessage
    int getState() -> f
    int getPosition() -> g
    void seekToProgress(int) -> e
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void activeSongReplaced(int,org.kreed.vanilla.Song) -> a
    int deleteMedia(int,long) -> a
    org.kreed.vanilla.Song shiftCurrentSong(int) -> f
    void userActionTriggered() -> h
    void addSongs(int,org.kreed.vanilla.QueryTask,int) -> a
    void enqueueFromCurrent(int) -> g
    void clearQueue() -> i
    java.lang.String getErrorMessage() -> j
    void timelineChanged() -> k
    org.kreed.vanilla.PlaybackService get(android.content.Context) -> b
    boolean hasInstance() -> l
    void addActivity(org.kreed.vanilla.PlaybackActivity) -> a
    void removeActivity(org.kreed.vanilla.PlaybackActivity) -> b
    int loadState() -> s
    void saveState(int) -> m
    int shuffleMode(int) -> h
    int finishAction(int) -> i
    android.app.PendingIntent createNotificationAction(android.content.SharedPreferences) -> a
    android.app.Notification createNotification(org.kreed.vanilla.Song,int) -> a
    void onAudioFocusChange(int) -> j
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void performAction(org.kreed.vanilla.Action,org.kreed.vanilla.PlaybackActivity) -> a
org.kreed.vanilla.PlaybackService$1 -> be:
    org.kreed.vanilla.PlaybackService this$0 -> a
    void onChange(boolean) -> onChange
org.kreed.vanilla.PlaybackService$2 -> bf:
    int[] $SwitchMap$org$kreed$vanilla$Action -> a
org.kreed.vanilla.PlaybackService$InCallListener -> bg:
    org.kreed.vanilla.PlaybackService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
org.kreed.vanilla.PlaybackService$Receiver -> bh:
    org.kreed.vanilla.PlaybackService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.kreed.vanilla.PlaylistActivity -> org.kreed.vanilla.PlaylistActivity:
    int[] MODE_FOR_ACTION -> a
    android.os.Looper mLooper -> b
    org.kreed.vanilla.DragListView mListView -> c
    org.kreed.vanilla.PlaylistAdapter mAdapter -> d
    long mPlaylistId -> e
    java.lang.String mPlaylistName -> f
    boolean mEditing -> g
    int mDefaultAction -> h
    int mLastAction -> i
    android.widget.Button mEditButton -> j
    android.widget.Button mDeleteButton -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onClick(android.view.View) -> onClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void performAction(int,int,long) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
org.kreed.vanilla.PlaylistAdapter -> bi:
    java.lang.String[] PROJECTION -> a
    android.content.Context mContext -> b
    android.os.Handler mWorkerHandler -> c
    android.os.Handler mUiHandler -> d
    long mPlaylistId -> e
    boolean mEditable -> f
    android.graphics.Bitmap mDragBitmap -> g
    android.graphics.Bitmap mDeleteBitmap -> h
    void setPlaylistId(long) -> a
    void setEditable(boolean) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    boolean handleMessage(android.os.Message) -> handleMessage
    android.database.Cursor runQuery(android.content.ContentResolver) -> a
    void move(int,int) -> a
    void remove(long) -> b
org.kreed.vanilla.PreferencesActivity -> org.kreed.vanilla.PreferencesActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
org.kreed.vanilla.PreferencesBackupAgent -> org.kreed.vanilla.PreferencesBackupAgent:
    void onCreate() -> onCreate
org.kreed.vanilla.QueryTask -> bj:
    android.net.Uri mUri -> a
    java.lang.String[] mProjection -> d
    java.lang.String mSelection -> e
    java.lang.String[] mSelectionArgs -> f
    java.lang.String mSortOrder -> b
    long mExtra -> c
    android.database.Cursor runQuery(android.content.ContentResolver) -> a
org.kreed.vanilla.ScanPreference -> org.kreed.vanilla.ScanPreference:
    android.content.BroadcastReceiver mReceiver -> a
    void onClick() -> onClick
org.kreed.vanilla.ScanPreference$1 -> bk:
    org.kreed.vanilla.ScanPreference this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.kreed.vanilla.SeekBarPreference -> org.kreed.vanilla.SeekBarPreference:
    int mValue -> a
    android.widget.TextView mValueText -> b
    java.lang.CharSequence getSummary() -> getSummary
    java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int) -> onGetDefaultValue
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    java.lang.String getSummary(int) -> a
    android.view.View onCreateDialogView() -> onCreateDialogView
    void onDialogClosed(boolean) -> onDialogClosed
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.kreed.vanilla.Song -> bl:
    java.lang.String[] EMPTY_PROJECTION -> a
    java.lang.String[] FILLED_PROJECTION -> b
    java.lang.String[] EMPTY_PLAYLIST_PROJECTION -> c
    java.lang.String[] FILLED_PLAYLIST_PROJECTION -> d
    org.kreed.vanilla.Song$CoverCache sCoverCache -> p
    boolean mDisableCoverArt -> e
    long id -> f
    long albumId -> g
    long artistId -> h
    java.lang.String path -> i
    java.lang.String title -> j
    java.lang.String album -> k
    java.lang.String artist -> l
    long duration -> m
    int trackNumber -> q
    int flags -> n
    android.graphics.BitmapFactory$Options BITMAP_OPTIONS -> o
    boolean isRandom() -> a
    void populate(android.database.Cursor) -> a
    long getId(org.kreed.vanilla.Song) -> a
    android.graphics.Bitmap getCover(android.content.Context) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.kreed.vanilla.Song$CoverCache -> bm:
    android.content.Context mContext -> a
    android.graphics.Bitmap create(java.lang.Long) -> a
    int sizeOf$2838e5a0(java.lang.Object) -> c
    java.lang.Object create(java.lang.Object) -> b
org.kreed.vanilla.SongTimeline -> bn:
    int[] FINISH_ICONS -> a
    int[] SHUFFLE_ICONS -> b
    android.content.Context mContext -> c
    java.util.ArrayList mSongs -> d
    int mCurrentPos -> e
    int mShuffleMode -> f
    int mFinishAction -> g
    java.util.ArrayList mShuffledSongs -> h
    org.kreed.vanilla.Song mSavedPrevious -> i
    org.kreed.vanilla.Song mSavedCurrent -> j
    org.kreed.vanilla.Song mSavedNext -> k
    org.kreed.vanilla.SongTimeline$Callback mCallback -> l
    void readState(java.io.DataInputStream) -> a
    void writeState(java.io.DataOutputStream) -> a
    void setCallback(org.kreed.vanilla.SongTimeline$Callback) -> a
    int getShuffleMode() -> a
    int getFinishAction() -> b
    void setShuffleMode(int) -> a
    void setFinishAction(int) -> b
    org.kreed.vanilla.Song shuffleAll() -> f
    org.kreed.vanilla.Song getSong(int) -> c
    void shiftCurrentSongInternal(int) -> e
    org.kreed.vanilla.Song shiftCurrentSong(int) -> d
    int addSongs(int,android.database.Cursor,int,long) -> a
    void purge() -> c
    void clearQueue() -> d
    void saveActiveSongs() -> g
    void broadcastChangedSongs() -> h
    void removeSong(long) -> a
    void changed() -> i
    boolean isEndOfQueue() -> e
org.kreed.vanilla.SongTimeline$Callback -> bo:
    void activeSongReplaced(int,org.kreed.vanilla.Song) -> a
    void timelineChanged() -> k
org.kreed.vanilla.SongTimeline$FlagComparator -> bp:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.kreed.vanilla.SongTimeline$IdComparator -> bq:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.kreed.vanilla.WidgetD -> org.kreed.vanilla.WidgetD:
    boolean sEnabled -> a
    void onEnabled(android.content.Context) -> onEnabled
    void onDisabled(android.content.Context) -> onDisabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void checkEnabled(android.content.Context,android.appwidget.AppWidgetManager) -> a
    void updateWidget(android.content.Context,android.appwidget.AppWidgetManager,org.kreed.vanilla.Song,int) -> a
